diff --git a/src/HuxDiscovery.php b/src/HuxDiscovery.php
index 49ef5cc01f7f77dbc3268fe4085d7dba7eed710c..0dea0554890d92ca4e1857ae8a1ae472ff6dab07 100644
--- a/src/HuxDiscovery.php
+++ b/src/HuxDiscovery.php
@@ -127,12 +127,12 @@ final class HuxDiscovery {
    * @param string $hook
    *   A hook.
    *
-   * @return \Generator<array{string, string, string, int}>
-   *   A generator yielding an array of service ID, module name, method name,
-   *   and priority.
+   * @return list<array{string, string, string, int}>
+   *   A list where each item is an array of service ID, module name, method
+   *   name, and priority.
    */
-  public function getHooks(string $hook): \Generator {
-    yield from $this->discovery[Hook::class][$hook] ?? [];
+  public function getHooks(string $hook): array {
+    return $this->discovery[Hook::class][$hook] ?? [];
   }
 
   /**
@@ -141,13 +141,13 @@ final class HuxDiscovery {
    * @param string $hook
    *   A hook.
    *
-   * @return \Generator<array{string, string, string, int[]}>
-   *   A generator yielding an array of service ID, module name, method name,
-   *   and flag for whether the original implementation should be passed as a
-   *   callable as first parameter.
+   * @return list<array{string, string, string, int[]}>
+   *   A list where each item is an array with service id, module name, method
+   *   name, and a flag for whether the original implementation should be passed
+   *   as a callable as first parameter.
    */
-  public function getHookReplacements(string $hook): \Generator {
-    yield from $this->discovery[ReplaceOriginalHook::class][$hook] ?? [];
+  public function getHookReplacements(string $hook): array {
+    return $this->discovery[ReplaceOriginalHook::class][$hook] ?? [];
   }
 
   /**
@@ -156,11 +156,11 @@ final class HuxDiscovery {
    * @param string $alter
    *   An alter.
    *
-   * @return \Generator<array{string, string, string}>
-   *   A generator yielding an array of service ID,  method name.
+   * @return list<array{string, string, string}>
+   *   A list where each item isan array of service ID and method name.
    */
-  public function getAlters(string $alter): \Generator {
-    yield from $this->discovery[Alter::class][$alter] ?? [];
+  public function getAlters(string $alter): array {
+    return $this->discovery[Alter::class][$alter] ?? [];
   }
 
   /**
diff --git a/src/HuxModuleHandler.php b/src/HuxModuleHandler.php
index 810c52f955dc6fa795b0f9e701d2e506e4c17ba9..b5dc95d5900fa87eff91adb35fb0cf519fe28a8d 100644
--- a/src/HuxModuleHandler.php
+++ b/src/HuxModuleHandler.php
@@ -193,13 +193,12 @@ final class HuxModuleHandler implements ModuleHandlerInterface {
    * @param string $hook
    *   A hook.
    *
-   * @return \Generator<array{callable, string}>
-   *   A generator with hook callbacks and other metadata.
+   * @return list<array{callable, string}>
+   *   A list where each item has a hook callback and a module name.
    */
-  private function generateInvokers(string $hook): \Generator {
+  private function generateInvokers(string $hook): array {
     if (isset($this->hooks[$hook])) {
-      yield from $this->hooks[$hook];
-      return;
+      return $this->hooks[$hook];
     }
 
     $hooks = [];
@@ -224,9 +223,7 @@ final class HuxModuleHandler implements ModuleHandlerInterface {
     });
 
     // Wait for all the [sorted] callables before caching.
-    $this->hooks[$hook] = $hooks;
-
-    yield from $this->hooks[$hook];
+    return $this->hooks[$hook] = $hooks;
   }
 
   /**
@@ -267,13 +264,12 @@ final class HuxModuleHandler implements ModuleHandlerInterface {
    * @param string $alter
    *   An alter.
    *
-   * @return \Generator<array{callable, string}>
-   *   A generator with hook callbacks and other metadata.
+   * @return list<callable>
+   *   A list of hook implementation callbacks.
    */
-  private function generateAlterInvokers(string $alter): \Generator {
+  private function generateAlterInvokers(string $alter): array {
     if (isset($this->alters[$alter])) {
-      yield from $this->alters[$alter];
-      return;
+      return $this->alters[$alter];
     }
 
     $this->alters[$alter] = [];
@@ -282,7 +278,7 @@ final class HuxModuleHandler implements ModuleHandlerInterface {
       $this->alters[$alter][] = \Closure::fromCallable([$service, $methodName]);
     }
 
-    yield from $this->alters[$alter];
+    return $this->alters[$alter];
   }
 
   /**
