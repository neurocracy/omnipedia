name: omnipedia

features:
  # @see https://docs.digitalocean.com/products/app-platform/how-to/upgrade-stack/
  - buildpack-stack=ubuntu-22
  # Opt in to the new Heroku Node.js buildpack if app is on the legacy one.
  #
  # @see https://docs.digitalocean.com/products/app-platform/how-to/migrate-nodejs-buildpack/
  - new-nodejs-buildpack=true

domains:
- domain: omnipedia.app
  type: PRIMARY
- domain: oembed.omnipedia.app
  type: ALIAS

databases:
- cluster_name: _CLUSTER_NAME_
  db_name: omnipedia
  db_user: omnipedia
  engine: MYSQL
  name: database
  production: true
  version: "8"

envs:
  # If you reference any private Git repositories from your composer.json, you
  # must provide Composer with a token for the respective service. Giving
  # DigitalOcean access to your GitHub repositories (other than the root one)
  # won't work, for example. The format for GitHub is provided here, but others
  # work as well, e.g. GitLab, and can be merged in if you need to use multiple
  # services.
  #
  # @see https://getcomposer.org/doc/05-repositories.md#using-private-repositories
- key: COMPOSER_AUTH
  scope: BUILD_TIME
  type: SECRET
  value: '{"github-oauth":{"github.com": "_GITHUB_TOKEN_"}}'
  # This must be specified for all components to ensure they don't differ and
  # cause Drupal to rebuild the container needlessly. Since they all get
  # deployed from the same repository and same commit each time, they should be
  # identical.
- key: DEPLOYMENT_IDENTIFIER
  scope: RUN_AND_BUILD_TIME
  value: ${_self.COMMIT_HASH}
- key: DISCOURSE_CONNECT_SECRET
  scope: RUN_TIME
  type: SECRET
  value: '_DISCOURSE_CONNECT_SECRET_'
- key: DRUPAL_CONFIG_SPLITS
  scope: RUN_TIME
  value: paranoia
- key: DRUPAL_DATABASE_NAME
  scope: RUN_TIME
  value: ${database.DATABASE}
- key: DRUPAL_DATABASE_USERNAME
  scope: RUN_TIME
  value: ${database.USERNAME}
- key: DRUPAL_DATABASE_PASSWORD
  scope: RUN_TIME
  value: ${database.PASSWORD}
- key: DRUPAL_DATABASE_HOSTNAME
  scope: RUN_TIME
  value: ${database.HOSTNAME}
- key: DRUPAL_DATABASE_PORT
  scope: RUN_TIME
  value: ${database.PORT}
- key: DRUPAL_HASH_SALT
  scope: RUN_TIME
  type: SECRET
  value: "_DRUPAL_HASH_SALT_"
- key: DRUPAL_HUX_OPTIMIZE
  scope: RUN_TIME
  value: "true"
- key: DRUPAL_MONOLOG_EMAIL
  scope: RUN_TIME
  value: "_DRUPAL_MONOLOG_EMAIL_"
- key: DRUPAL_PRIMARY_HOST
  scope: RUN_AND_BUILD_TIME
  value: ${APP_DOMAIN}
- key: DRUPAL_OEMBED_HOST
  scope: RUN_AND_BUILD_TIME
  value: oembed.omnipedia.app
- key: DRUPAL_REVERSE_PROXY_ENABLED
  scope: RUN_TIME
  value: "true"
- key: DRUPAL_SUPPRESS_DEPRECATIONS
  scope: RUN_TIME
  value: "true"
- key: DRUPAL_SMTP_HOST_PRIMARY
  scope: RUN_TIME
  value: "_DRUPAL_SMTP_HOST_PRIMARY_"
- key: DRUPAL_SMTP_HOST_SECONDARY
  scope: RUN_TIME
  value: "_DRUPAL_SMTP_HOST_SECONDARY_"
- key: DRUPAL_SMTP_PASSWORD
  scope: RUN_TIME
  type: SECRET
  value: "_DRUPAL_SMTP_PASSWORD_"
- key: DRUPAL_TWO_FACTOR_SECRET
  scope: RUN_TIME
  type: SECRET
  value: "_DRUPAL_TWO_FACTOR_SECRET_"
- key: DRUSH_OPTIONS_URI
  scope: RUN_AND_BUILD_TIME
  value: ${APP_URL}
  # Append our PHP settings directory. Note the leading ":" which tells PHP to
  # scan all the default locations first before appending ours; without the ":",
  # PHP would ignore all the default locations and only use our settings, which
  # only contain a small subset of PHP settings and would likely do bad things.
- key: PHP_INI_SCAN_DIR
  scope: RUN_AND_BUILD_TIME
  value: :/workspace/.php/
- key: SPACES_ACCESS
  scope: RUN_TIME
  type: SECRET
  value: "_SPACES_ACCESS_"
- key: SPACES_SECRET
  scope: RUN_TIME
  type: SECRET
  value: "_SPACES_SECRET_"
# This is the name of the DigitalOcean Spaces bucket.
- key: S3FS_BUCKET
  scope: RUN_TIME
  value: "_S3FS_BUCKET_"
# This is the custom domain name the DigitalOcean Spaces bucket is mapped to.
- key: S3FS_DOMAIN
  scope: RUN_TIME
  value: "cdn.omnipedia.app"
# This is the DigitalOcean Spaces host name, in the format of
# 'https://REGION.digitaloceanspaces.com' where REGION is the datacentre the
# bucket is hosted in. This should match the value in the 'S3FS_REGION' env var.
- key: S3FS_HOSTNAME
  scope: RUN_TIME
  value: "https://nyc3.digitaloceanspaces.com"
# The DigitalOcean Spaces datacentre region.
- key: S3FS_REGION
  scope: RUN_TIME
  value: "nyc3"
# If true, instructs the S3 File System module to take over the public:// and
# private:// stream wrappers entirely and serve them from the DigitalOcean
# Spaces bucket.
- key: S3FS_TAKEOVER
  scope: RUN_TIME
  value: "true"
  # Reusing Yarn cache on App Platform seems to not work as expected and results
  # in a failed build due to error:
  #
  # mv: cannot move '/layers/heroku_nodejs/shim/node/cache/yarn' to '/workspace/.yarn/cache': No such file or directory
- key: NODE_MODULES_CACHE
  scope: BUILD_TIME
  value: 'false'
- key: USE_YARN_CACHE
  scope: BUILD_TIME
  value: 'false'

ingress:
  rules:
  - component:
      name: web
    cors:
      allow_methods:
      - GET
      - HEAD
      - POST
      allow_origins:
      - regex: ([^\.]+\.)?omnipedia\.app$
    match:
      path:
        prefix: /

services:
- build_command: .do/build-web.sh
  environment_slug: php
  gitlab:
    branch: main
    repo: neurocracy/omnipedia/omnipedia
  health_check:
    http_path: /health
    initial_delay_seconds: 0
    timeout_seconds: 30
  http_port: 80
  instance_count: 2
  instance_size_slug: apps-s-1vcpu-1gb
  internal_ports:
  - 8080
  name: web
  run_command: .do/run-web.sh
  source_dir: /
  envs:
  # This informs the Heroku buildpack to spawn this number of php-fpm workers.
  # Unfortunately, the value App Platform sets for this seems too high for us
  # and results in some requests stalling and causing a restart, probably due
  # to running out of RAM. App Platform probably scales this based on the
  # container RAM size, so it may have to be manually adjusted if increasing or
  # decreasing the RAM amount.
  #
  # @see https://devcenter.heroku.com/articles/php-concurrency
  - key: WEB_CONCURRENCY
    scope: RUN_AND_BUILD_TIME
    value: "16"

workers:
- build_command: .do/build-background-tasks.sh
  environment_slug: php
  gitlab:
    branch: main
    repo: neurocracy/omnipedia/omnipedia
  instance_count: 1
  instance_size_slug: apps-s-1vcpu-0.5gb
  name: background-tasks
  run_command: php .do/run-background-tasks.php
  source_dir: /

jobs:
- environment_slug: php
  gitlab:
    branch: main
    repo: neurocracy/omnipedia/omnipedia
  instance_count: 1
  instance_size_slug: apps-s-1vcpu-1gb-fixed
  kind: PRE_DEPLOY
  name: pre-deploy
  run_command: .do/jobs/pre-deploy.sh
  source_dir: /
- environment_slug: php
  gitlab:
    branch: main
    repo: neurocracy/omnipedia/omnipedia
  instance_count: 1
  instance_size_slug: apps-s-1vcpu-1gb-fixed
  kind: POST_DEPLOY
  name: post-successful-deploy
  run_command: .do/jobs/post-successful-deploy.sh
  source_dir: /
- environment_slug: php
  gitlab:
    branch: main
    repo: neurocracy/omnipedia/omnipedia
  instance_count: 1
  instance_size_slug: apps-s-1vcpu-1gb-fixed
  kind: FAILED_DEPLOY
  name: post-failed-deploy
  run_command: .do/jobs/post-failed-deploy.sh
  source_dir: /
